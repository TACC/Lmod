Kitchen Sink Modulefiles
========================

Most of the time a modulefile is just a collection of setting
environment variables and prepending to PATH or other path like
variables. However, the modulefiles are actually programs so you can
do a great deal if necessary.

Introspection
^^^^^^^^^^^^^

Getting ready for EasyBuild
^^^^^^^^^^^^^^^^^^^^^^^^^^^

Your users will like this:
* By providing a modulefile for the default EB modulepath in user-space, it is now easy to save/restore that environment

    $ cat /etc/site/modules/use.own.eb/prepend  ## yes, the name of this could be better ;-)
    #%Module1.0#####################################################################
    ##
    ## use.own.eb modulefile
    ##
    ## modulefiles/use.own.eb.  Generated by fgeorgatos
    ##
    proc ModulesHelp { } {
        global rkoversion

        puts stderr "\tThis module file will add \$HOME/.local/easybuild/modules/all to the"
        puts stderr "\tlist of directories that the module command will search"
        puts stderr "\tfor modules.  Place your own module files here."
        puts stderr "\tThis module, when loaded, will create this directory"
        puts stderr "\tif necessary."
        puts stderr "\n\tVersion $rkoversion\n"
    }

    module-whatis       "adds your EasyBuild modulefiles directory to MODULEPATH"

    # for Tcl script use only
    set rkoversion      6.1

    eval set  [ array get env HOME ]
    set ownmoddir       $HOME/.local/easybuild/modules/all

    # create directory if necessary
    if [ module-info mode load ] {
        if { ! [ file exists $ownmoddir ] } {
                file mkdir $ownmoddir
                set null [open $ownmoddir/null w]
        puts $null "#%Module########################################################################"
        puts $null "##"
        puts $null "## null modulefile"
        puts $null "##"
        puts $null "proc ModulesHelp { } {"
        puts $null "        global version"
        puts $null ""
        puts $null "        puts stderr \"\tThis module does absolutely nothing.\""
        puts $null "        puts stderr \"\tIt's meant simply as a place holder in your\""
        puts $null "    puts stderr \"\tdot file initialization.\""
        puts $null "        puts stderr \"\n\tVersion \$version\n\""
        puts $null "}"
        puts $null ""
        puts $null "module-whatis       \"does absolutely nothing\""
        puts $null ""
        puts $null "# for Tcl script use only"
        puts $null "set     version      6.1"
        }
    }

    module use --prepend $ownmoddir

Similarly, you can have a second file with the `prepend` suffix; alphabetical sorting makes them work as you would like ;-)
