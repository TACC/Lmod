-- -*- lua -*-
testdescript = {
   owner   = "rtm",
   product = "modules",
   description = [[
	 Test spider cache filtering
   ]],
   keywords = {"spider", "cache", "filter" },

   active = 1,
   testName = "spider_filter",
   job_submit_method = "INTERACTIVE",

   runScript = [[

     . $(projectDir)/rt/common_funcs.sh

     unsetMT
     initStdEnvVars
     remove_generated_lmod_files

     export LMOD_RC=$(testDir)/lmodrc.lua
     export PROD_CACHE_DIR=$(outputDir)/mf_prod/cacheDir
     export PROD_TIMESTAMP_FILE=$(outputDir)/mf_prod/timestamp
     export TEST_CACHE_DIR=$(outputDir)/mf_test/cacheDir
     export TEST_TIMESTAMP_FILE=$(outputDir)/mf_test/timestamp

     mkdir -p $PROD_CACHE_DIR
     mkdir -p $TEST_CACHE_DIR
     buildSpiderT $(testDir)/mf_prod/Core > $PROD_CACHE_DIR/spiderT.lua
     buildSpiderT $(testDir)/mf_test/Core > $TEST_CACHE_DIR/spiderT.lua
     touch $PROD_TIMESTAMP_FILE
     touch $TEST_TIMESTAMP_FILE
     
     export MODULEPATH=$(testDir)/mf_prod/Core
     runLmod spider      # 1
     
     export MODULEPATH=$(testDir)/mf_prod/Core:$(testDir)/mf_test/Core
     runLmod spider      # 2
     
     export MODULEPATH=$(testDir)/mf_prod/Core
     runLmod spider      # 3
     
     HOME=$ORIG_HOME

     cat _stdout.[0-9][0-9][0-9] > _stdout.orig
     joinBase64Results  -bash  _stdout.orig _stdout.new
     cleanUp _stdout.new out.txt

     cat _stderr.[0-9][0-9][0-9] > _stderr.orig
     cleanUp _stderr.orig err.txt

     rm -f results.csv
     wrapperDiff --csv results.csv $(testDir)/out.txt out.txt
     wrapperDiff --csv results.csv $(testDir)/err.txt err.txt
     testFinish -r $(resultFn) -t $(runtimeFn) results.csv
   ]],


   blessScript = [[
         # perform what is needed
   ]],

   tests = {
      { id='t1'},
   },

}
