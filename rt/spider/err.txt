===========================
step 1
lua ProjectDIR/src/lmod.in.lua shell --regression_testing --version
===========================
Modules based on Lua: Version 8.7.60 2025-04-30 12:50 -05:00
    by Robert McLay mclay@tacc.utexas.edu
===========================
step 2
lua ProjectDIR/src/lmod.in.lua shell --regression_testing use -a ProjectDIR/rt/spider/mf/Core ProjectDIR/rt/spider/mf/Beta ProjectDIR/rt/spider/mf/Base ProjectDIR/rt/spider/mf/Core2
===========================
===========================
step 3
lua ProjectDIR/src/lmod.in.lua shell --regression_testing spider
===========================
The following is a list of the modules and extensions currently available:
  PrgEnv: PrgEnv
  R: R/2.1.5
  admin: admin/admin-1.0
  alex: alex/1.0
  apps: apps/moabdev
  apps/gromacs: apps/gromacs/4.0.7, apps/gromacs/4.6.3-debug, apps/gromacs/4.6.3
  boost: boost/1.46.0, boost/1.47.1, boost/1.49.0
  bwa: bwa/0.7.1, bwa/0.7.2, bwa/0.7.9a, bwa/0.7.9, bwa/0.7.10
  cmplrs/intel: cmplrs/intel/14.0
  gcc: gcc/4.2.3
  git: git/1.6.3.1, git/1.7.4, git/1.7.4.3
  gotoblas: gotoblas/1.20, gotoblas/1.26, gotoblas/1.30-beta, gotoblas/1.30, gotoblas/1.31, gotoblas/1.32, gotoblas/1.33
    Blas Level 1, 2, 3 routines
  greenlet: greenlet/0.4.0
    The greenlet package is a spin-off of Stackless, a version of CPython that supports micro-threads called "tasklets". Tasklets run pseudo-concurrently (typically in a single or a few OS-level threads) and are synchronized with data exchanges on "channels". A "greenlet", on the other hand, is a still more primitive notion of micro-thread with no implicit scheduling; coroutines, in other words. This is useful when you want to control exactly when your code runs. - Homepage: https://github.com/python-greenlet/greenlet
  intel: intel/intel
  is-dyna: is-dyna/1.0, is-dyna/2.0
  junk/a/c: junk/a/c/1.0
  junk/b/c: junk/b/c/2.0
  junk/d: junk/d/3.0
  lanl: lanl/1.0
  local: local/local
  mpi/openmpi: mpi/openmpi/1.6.5
  mpich2: mpich2/1.0.7
  multi: multi/multi
  noweb: noweb/2.10c
  numpy: numpy/1.16.4 (E)
  openmpi: openmpi/1.2.6
  parmetis: parmetis/3.1, parmetis/4.0.1
    Parallel graph partitioning and fill-reduction matrix ordering routines
  petsc: petsc/3.1, petsc/3.2
  phdf5: phdf5/1.8.2, phdf5/1.8.9, phdf5/1.8.10
  python2: python2/2.7
  r: r/2.1.5
  scipy: scipy/1.2.2 (E)
  unix: unix/unix
Names marked by a trailing (E) are extensions provided by another module.
To learn more about a package execute:
   $ module spider Foo
where "Foo" is the name of a module.
To find detailed information about a particular package you
must specify the version if there is more than one version:
   $ module spider Foo/11.1
===========================
step 4
lua ProjectDIR/src/lmod.in.lua shell --regression_testing -t spider
===========================
PrgEnv
R/
R/2.1.5
admin/
admin/admin-1.0
alex/
alex/1.0
apps/
apps/moabdev
apps/gromacs/
apps/gromacs/4.0.7
apps/gromacs/4.6.3-debug
apps/gromacs/4.6.3
boost/
boost/1.46.0
boost/1.47.1
boost/1.49.0
bwa/
bwa/0.7.1
bwa/0.7.2
bwa/0.7.9a
bwa/0.7.9
bwa/0.7.10
cmplrs/intel/
cmplrs/intel/14.0
gcc/
gcc/4.2.3
git/
git/1.6.3.1
git/1.7.4
git/1.7.4.3
gotoblas/
gotoblas/1.20
gotoblas/1.26
gotoblas/1.30-beta
gotoblas/1.30
gotoblas/1.31
gotoblas/1.32
gotoblas/1.33
greenlet/
greenlet/0.4.0
intel/
intel/intel
is-dyna/
is-dyna/1.0
is-dyna/2.0
junk/a/c/
junk/a/c/1.0
junk/b/c/
junk/b/c/2.0
junk/d/
junk/d/3.0
lanl/
lanl/1.0
local/
local/local
mpi/openmpi/
mpi/openmpi/1.6.5
mpich2/
mpich2/1.0.7
multi/
multi/multi
noweb/
noweb/2.10c
numpy/
numpy/1.16.4
openmpi/
openmpi/1.2.6
parmetis/
parmetis/3.1
parmetis/4.0.1
petsc/
petsc/3.1
petsc/3.2
phdf5/
phdf5/1.8.2
phdf5/1.8.9
phdf5/1.8.10
python2/
python2/2.7
r/
r/2.1.5
scipy/
scipy/1.2.2
unix/
unix/unix
===========================
step 5
lua ProjectDIR/src/lmod.in.lua shell --regression_testing spider mpich2
===========================
  mpich2: mpich2/1.0.7
    You will need to load all module(s) on any one of the lines below before the "mpich2/1.0.7" module is available to load.
      intel/intel
===========================
step 6
lua ProjectDIR/src/lmod.in.lua shell --regression_testing spider mpich2/1.0.7
===========================
  mpich2: mpich2/1.0.7
    You will need to load all module(s) on any one of the lines below before the "mpich2/1.0.7" module is available to load.
      intel/intel
===========================
step 7
lua ProjectDIR/src/lmod.in.lua shell --regression_testing spider parmetis/3.1
===========================
  parmetis: parmetis/3.1
    Description:
      Parallel graph partitioning and fill-reduction matrix ordering routines
    Properties:
      built for host and native MIC
    This module can be loaded directly: module load parmetis/3.1
    Additional variants of this module can also be loaded after loading the following modules:
      gcc/4.2.3  openmpi/1.2.6
      intel/intel  openmpi/1.2.6
===========================
step 8
lua ProjectDIR/src/lmod.in.lua shell --regression_testing spider mpich2me
===========================
Lmod has detected the following error: Unable to find: "mpich2me".
===========================
step 9
lua ProjectDIR/src/lmod.in.lua shell --regression_testing spider R
===========================
  R: R/2.1.5
     Other possible modules matches:
        PrgEnv, apps/gromacs, cmplrs/intel, greenlet, parmetis, r
    This module can be loaded directly: module load R/2.1.5
  To find other possible module matches execute:
      $ module -r spider '.*R.*'
===========================
step 10
lua ProjectDIR/src/lmod.in.lua shell --regression_testing -r spider ^R
===========================
  R: R/2.1.5
    This module can be loaded directly: module load R/2.1.5
===========================
step 11
lua ProjectDIR/src/lmod.in.lua shell --regression_testing -r spider ^[Rr]
===========================
  R: R/2.1.5
    This module can be loaded directly: module load R/2.1.5
  r: r/2.1.5
    This module can be loaded directly: module load r/2.1.5
===========================
step 12
lua ProjectDIR/src/lmod.in.lua shell --regression_testing spider mpich2/1.0.5
===========================
Lmod has detected the following error: Unable to find: "mpich2/1.0.5".
===========================
step 13
lua ProjectDIR/src/lmod.in.lua shell --regression_testing spider is-dyna
===========================
  is-dyna:
     Versions:
        is-dyna/1.0
        is-dyna/2.0
  For detailed information about a specific "is-dyna" package (including how to load the modules) use the module's full name.
  Note that names that have a trailing (E) are extensions provided by other modules.
  For example:
     $ module spider is-dyna/2.0
===========================
step 14
lua ProjectDIR/src/lmod.in.lua shell --regression_testing spider is-dyna/1.0
===========================
  is-dyna: is-dyna/1.0
    This module can be loaded directly: module load is-dyna/1.0
===========================
step 15
lua ProjectDIR/src/lmod.in.lua shell --regression_testing spider bwa
===========================
  bwa:
     Versions:
        bwa/0.7.1
        bwa/0.7.2
        bwa/0.7.9a
        bwa/0.7.9
        bwa/0.7.10
  For detailed information about a specific "bwa" package (including how to load the modules) use the module's full name.
  Note that names that have a trailing (E) are extensions provided by other modules.
  For example:
     $ module spider bwa/0.7.10
===========================
step 16
lua ProjectDIR/src/lmod.in.lua shell --regression_testing spider gromacs
===========================
  apps/gromacs:
     Versions:
        apps/gromacs/4.0.7
        apps/gromacs/4.6.3-debug
        apps/gromacs/4.6.3
  For detailed information about a specific "apps/gromacs" package (including how to load the modules) use the module's full name.
  Note that names that have a trailing (E) are extensions provided by other modules.
  For example:
     $ module spider apps/gromacs/4.6.3
===========================
step 17
lua ProjectDIR/src/lmod.in.lua shell --regression_testing spider apps/gromacs
===========================
  apps/gromacs:
     Versions:
        apps/gromacs/4.0.7
        apps/gromacs/4.6.3-debug
        apps/gromacs/4.6.3
  For detailed information about a specific "apps/gromacs" package (including how to load the modules) use the module's full name.
  Note that names that have a trailing (E) are extensions provided by other modules.
  For example:
     $ module spider apps/gromacs/4.6.3
===========================
step 18
lua ProjectDIR/src/lmod.in.lua shell --regression_testing spider apps/gromacs/4.6.3
===========================
  apps/gromacs: apps/gromacs/4.6.3
    You will need to load all module(s) on any one of the lines below before the "apps/gromacs/4.6.3" module is available to load.
      cmplrs/intel/14.0  mpi/openmpi/1.6.5
===========================
step 19
lua ProjectDIR/src/lmod.in.lua shell --regression_testing spider apps/gromacs/4.6.3-debug
===========================
  apps/gromacs: apps/gromacs/4.6.3-debug
    You will need to load all module(s) on any one of the lines below before the "apps/gromacs/4.6.3-debug" module is available to load.
      cmplrs/intel/14.0  mpi/openmpi/1.6.5
===========================
step 20
lua ProjectDIR/src/lmod.in.lua shell --regression_testing use ProjectDIR/rt/spider/mf/UNKNOWN
===========================
===========================
step 21
lua ProjectDIR/src/lmod.in.lua shell --regression_testing spider
===========================
The following is a list of the modules and extensions currently available:
  PrgEnv: PrgEnv
  R: R/2.1.5
  admin: admin/admin-1.0
  alex: alex/1.0
  apps: apps/moabdev
  apps/gromacs: apps/gromacs/4.0.7, apps/gromacs/4.6.3-debug, apps/gromacs/4.6.3
  boost: boost/1.46.0, boost/1.47.1, boost/1.49.0
  bwa: bwa/0.7.1, bwa/0.7.2, bwa/0.7.9a, bwa/0.7.9, bwa/0.7.10
  cmplrs/intel: cmplrs/intel/14.0
  gcc: gcc/4.2.3
  git: git/1.6.3.1, git/1.7.4, git/1.7.4.3
  gotoblas: gotoblas/1.20, gotoblas/1.26, gotoblas/1.30-beta, gotoblas/1.30, gotoblas/1.31, gotoblas/1.32, gotoblas/1.33
    Blas Level 1, 2, 3 routines
  greenlet: greenlet/0.4.0
    The greenlet package is a spin-off of Stackless, a version of CPython that supports micro-threads called "tasklets". Tasklets run pseudo-concurrently (typically in a single or a few OS-level threads) and are synchronized with data exchanges on "channels". A "greenlet", on the other hand, is a still more primitive notion of micro-thread with no implicit scheduling; coroutines, in other words. This is useful when you want to control exactly when your code runs. - Homepage: https://github.com/python-greenlet/greenlet
  intel: intel/intel
  is-dyna: is-dyna/1.0, is-dyna/2.0
  junk/a/c: junk/a/c/1.0
  junk/b/c: junk/b/c/2.0
  junk/d: junk/d/3.0
  lanl: lanl/1.0
  local: local/local
  mpi/openmpi: mpi/openmpi/1.6.5
  mpich2: mpich2/1.0.7
  multi: multi/multi
  noweb: noweb/2.10c
  numpy: numpy/1.16.4 (E)
  openmpi: openmpi/1.2.6
  parmetis: parmetis/3.1, parmetis/4.0.1
    Parallel graph partitioning and fill-reduction matrix ordering routines
  petsc: petsc/3.1, petsc/3.2
  phdf5: phdf5/1.8.2, phdf5/1.8.9, phdf5/1.8.10
  python2: python2/2.7
  r: r/2.1.5
  scipy: scipy/1.2.2 (E)
  unix: unix/unix
Names marked by a trailing (E) are extensions provided by another module.
To learn more about a package execute:
   $ module spider Foo
where "Foo" is the name of a module.
To find detailed information about a particular package you
must specify the version if there is more than one version:
   $ module spider Foo/11.1
===========================
step 22
lua ProjectDIR/src/lmod.in.lua shell --regression_testing spider gromacs
===========================
  apps/gromacs:
     Versions:
        apps/gromacs/4.0.7
        apps/gromacs/4.6.3-debug
        apps/gromacs/4.6.3
  For detailed information about a specific "apps/gromacs" package (including how to load the modules) use the module's full name.
  Note that names that have a trailing (E) are extensions provided by other modules.
  For example:
     $ module spider apps/gromacs/4.6.3
===========================
step 23
lua ProjectDIR/src/lmod.in.lua shell --regression_testing spider apps/gromacs
===========================
  apps/gromacs:
     Versions:
        apps/gromacs/4.0.7
        apps/gromacs/4.6.3-debug
        apps/gromacs/4.6.3
  For detailed information about a specific "apps/gromacs" package (including how to load the modules) use the module's full name.
  Note that names that have a trailing (E) are extensions provided by other modules.
  For example:
     $ module spider apps/gromacs/4.6.3
===========================
step 24
lua ProjectDIR/src/lmod.in.lua shell --regression_testing spider apps/gromacs/4.6.3
===========================
  apps/gromacs: apps/gromacs/4.6.3
    You will need to load all module(s) on any one of the lines below before the "apps/gromacs/4.6.3" module is available to load.
      cmplrs/intel/14.0  mpi/openmpi/1.6.5
===========================
step 25
lua ProjectDIR/src/lmod.in.lua shell --regression_testing spider apps/gromacs/4.6.3-debug
===========================
  apps/gromacs: apps/gromacs/4.6.3-debug
    You will need to load all module(s) on any one of the lines below before the "apps/gromacs/4.6.3-debug" module is available to load.
      cmplrs/intel/14.0  mpi/openmpi/1.6.5
===========================
step 26
lua ProjectDIR/src/lmod.in.lua shell --regression_testing spider petsc/3.1
===========================
  petsc: petsc/3.1
    You will need to load all module(s) on any one of the lines below before the "petsc/3.1" module is available to load.
      intel/intel  mpich2/1.0.7
===========================
step 27
lua ProjectDIR/src/lmod.in.lua shell --regression_testing use ProjectDIR/rt/spider/mf/Core3
===========================
===========================
step 28
lua ProjectDIR/src/lmod.in.lua shell --regression_testing spider smrt
===========================
  smrt: smrt/2.3
    This module can be loaded directly: module load smrt/2.3
===========================
step 29
lua ProjectDIR/src/lmod.in.lua shell --regression_testing spider petsc/3.1
===========================
  petsc: petsc/3.1
    You will need to load all module(s) on any one of the lines below before the "petsc/3.1" module is available to load.
      intel/intel  mpich2/1.0.7
===========================
step 30
lua ProjectDIR/src/lmod.in.lua shell --regression_testing spider
===========================
The following is a list of the modules and extensions currently available:
  hpl: hpl/2.2
    HPL is a software package that solves a (random) dense linear system in double precision (64 bits) arithmetic on distributed-memory computers. It can thus be regarded as a portable as well as freely available implementation of the High Performance Computing Linpack Benchmark. - Homepage: http://www.netlib.org/benchmark/hpl/
  imkl: imkl/2017.1.132
    Intel Math Kernel Library is a library of highly optimized, extensively threaded math routines for science, engineering, and financial applications that require maximum performance. Core math functions include BLAS, LAPACK, ScaLAPACK, Sparse Solvers, Fast Fourier Transforms, Vector Math, and more. - Homepage: http://software.intel.com/en-us/intel-mkl/
  intel: intel/2017.1.132
    Intel Cluster Toolkit Compiler Edition provides Intel C,C++ and fortran compilers, Intel MPI and Intel MKL - Homepage: http://software.intel.com/en-us/intel-cluster-toolkit-compiler/
  openmpi: openmpi/2.0.1
    The Open MPI Project is an open source MPI-2 implementation. - Homepage: http://www.open-mpi.org/
To learn more about a package execute:
   $ module spider Foo
where "Foo" is the name of a module.
To find detailed information about a particular package you
must specify the version if there is more than one version:
   $ module spider Foo/11.1
===========================
step 31
lua ProjectDIR/src/lmod.in.lua shell --regression_testing spider GCC
===========================
  GCC: GCC/6.3.0
     Other possible modules matches:
        GCCcore
    This module can be loaded directly: module load GCC/6.3.0
  To find other possible module matches execute:
      $ module -r spider '.*GCC.*'
===========================
step 32
lua ProjectDIR/src/lmod.in.lua shell --regression_testing spider gcc
===========================
  GCC: GCC/6.3.0
    This module can be loaded directly: module load GCC/6.3.0
===========================
step 33
runSpiderCmd -o spiderT ProjectDIR/rt/spider/mf/E_Core
===========================
===========================
step 34
runSpiderCmd -o dbT ProjectDIR/rt/spider/mf/E_Core
===========================
===========================
step 35
lua ProjectDIR/src/lmod.in.lua shell --regression_testing spider python2/2.7
===========================
  python2: python2/2.7
    You will need to load all module(s) on any one of the lines below before the "python2/2.7" module is available to load.
      gcc/4.2.3
      gcc/4.2.5
      intel/11.0
      intel/11.2
    This module provides the following extensions:
       numpy/1.16.4 (E), scipy/1.2.2 (E)
    Help:
      This is the help message for python 2.7
===========================
step 36
lua ProjectDIR/src/lmod.in.lua shell --regression_testing -t spider
===========================
Algorithm::Dependency/
Algorithm::Dependency/1.111
Algorithm::Diff/
Algorithm::Diff/1.1903
YAML::Tiny/
YAML::Tiny/1.73
gcc/
gcc/4.2.3
gcc/4.2.5
intel/
intel/11.0
intel/11.2
numpy/
numpy/1.12
numpy/1.16.4
perl/
perl/5.18.4
python2/
python2/2.6.12
python2/2.7
python2/2.7.14
scipy/
scipy/1.1
scipy/1.2.2
===========================
step 37
lua ProjectDIR/src/lmod.in.lua shell --regression_testing spider
===========================
The following is a list of the modules and extensions currently available:
  Algorithm::Dependency: Algorithm::Dependency/1.111 (E)
  Algorithm::Diff: Algorithm::Diff/1.1903 (E)
  gcc: gcc/4.2.3, gcc/4.2.5
  intel: intel/11.0, intel/11.2
  numpy: numpy/1.12 (E), numpy/1.16.4 (E)
  perl: perl/5.18.4
  python2: python2/2.6.12, python2/2.7, python2/2.7.14
  scipy: scipy/1.1 (E), scipy/1.2.2 (E)
  YAML::Tiny: YAML::Tiny/1.73 (E)
Names marked by a trailing (E) are extensions provided by another module.
To learn more about a package execute:
   $ module spider Foo
where "Foo" is the name of a module.
To find detailed information about a particular package you
must specify the version if there is more than one version:
   $ module spider Foo/11.1
===========================
step 38
lua ProjectDIR/src/lmod.in.lua shell --regression_testing spider numpy
===========================
  numpy:
     Versions:
        numpy/1.12 (E)
        numpy/1.16.4 (E)
Names marked by a trailing (E) are extensions provided by another module.
  For detailed information about a specific "numpy" package (including how to load the modules) use the module's full name.
  Note that names that have a trailing (E) are extensions provided by other modules.
  For example:
     $ module spider numpy/1.16.4
===========================
step 39
lua ProjectDIR/src/lmod.in.lua shell --regression_testing spider numpy/1.16.4
===========================
  numpy: numpy/1.16.4 (E)
    This extension is provided by the following modules. To access the extension you must load one of the following modules. Note that any module names in parentheses show the module location in the software hierarchy.
       python2/2.7.14
       python2/2.7 (intel/11.2)
       python2/2.7 (intel/11.0)
       python2/2.7 (gcc/4.2.5)
       python2/2.7 (gcc/4.2.3)
Names marked by a trailing (E) are extensions provided by another module.
===========================
step 40
lua ProjectDIR/src/lmod.in.lua shell --regression_testing load numpy
===========================
Lmod has detected the following error: These module(s) or extension(s) exist but cannot be loaded as requested: "numpy"
   Try: "module spider numpy" to see how to load the module(s).
===========================
step 41
lua ProjectDIR/src/lmod.in.lua shell --regression_testing load numpy/1.16.4
===========================
Lmod has detected the following error: These module(s) or extension(s) exist but cannot be loaded as requested: "numpy/1.16.4"
   Try: "module spider numpy/1.16.4" to see how to load the module(s).
===========================
step 42
lua ProjectDIR/src/lmod.in.lua shell --regression_testing avail
===========================
Global Aliases
   intelcompiler -> intel/11.2
ProjectDIR/rt/spider/mf/E_Core
   gcc/4.2.3        intel/11.0        perl/5.18.4       python2/2.7.14 (D)
   gcc/4.2.5 (D)    intel/11.2 (D)    python2/2.6.12
This is a list of module extensions. Use "module --nx avail ..." to not show extensions.
    Algorithm::Dependency (E)     YAML::Tiny (E)     scipy (E)
    Algorithm::Diff       (E)     numpy      (E)
These extensions cannot be loaded directly, use "module spider extension_name" for more information.
  Where:
   D:  Default Module
   E:  Extension that is provided by another module
If the avail list is too long consider trying:
"module --default avail" or "ml -d av" to just list the default modules.
"module overview" or "ml ov" to display the number of modules for each name.
Use "module spider" to find all possible modules and extensions.
Use "module keyword key1 key2 ..." to search for all possible modules matching any of the "keys".
===========================
step 43
lua ProjectDIR/src/lmod.in.lua shell --regression_testing --nx avail
===========================
Global Aliases
   intelcompiler -> intel/11.2
ProjectDIR/rt/spider/mf/E_Core
   gcc/4.2.3        intel/11.0        perl/5.18.4       python2/2.7.14 (D)
   gcc/4.2.5 (D)    intel/11.2 (D)    python2/2.6.12
  Where:
   D:  Default Module
If the avail list is too long consider trying:
"module --default avail" or "ml -d av" to just list the default modules.
"module overview" or "ml ov" to display the number of modules for each name.
Use "module spider" to find all possible modules and extensions.
Use "module keyword key1 key2 ..." to search for all possible modules matching any of the "keys".
===========================
step 44
lua ProjectDIR/src/lmod.in.lua shell --regression_testing avail
===========================
Global Aliases
   intelcompiler -> intel/11.2
ProjectDIR/rt/spider/mf/E_Core
   gcc/4.2.3        intel/11.0        perl/5.18.4       python2/2.7.14 (D)
   gcc/4.2.5 (D)    intel/11.2 (D)    python2/2.6.12
  Where:
   D:  Default Module
If the avail list is too long consider trying:
"module --default avail" or "ml -d av" to just list the default modules.
"module overview" or "ml ov" to display the number of modules for each name.
Use "module spider" to find all possible modules and extensions.
Use "module keyword key1 key2 ..." to search for all possible modules matching any of the "keys".
===========================
step 45
lua ProjectDIR/src/lmod.in.lua shell --regression_testing avail
===========================
Global Aliases
   intelcompiler -> intel/11.2
ProjectDIR/rt/spider/mf/E_Core
   gcc/4.2.3        intel/11.0        perl/5.18.4       python2/2.7.14 (D)
   gcc/4.2.5 (D)    intel/11.2 (D)    python2/2.6.12
This is a list of module extensions. Use "module --nx avail ..." to not show extensions.
    Algorithm::Dependency (E)     YAML::Tiny (E)     scipy (E)
    Algorithm::Diff       (E)     numpy      (E)
These extensions cannot be loaded directly, use "module spider extension_name" for more information.
  Where:
   D:  Default Module
   E:  Extension that is provided by another module
If the avail list is too long consider trying:
"module --default avail" or "ml -d av" to just list the default modules.
"module overview" or "ml ov" to display the number of modules for each name.
Use "module spider" to find all possible modules and extensions.
Use "module keyword key1 key2 ..." to search for all possible modules matching any of the "keys".
===========================
step 46
lua ProjectDIR/src/lmod.in.lua shell --regression_testing keyword numpy
===========================
The following modules match your search criteria: "numpy"
  numpy: numpy/1.12 (E), numpy/1.16.4 (E)
Names marked by a trailing (E) are extensions provided by another module.
To learn more about a package execute:
   $ module spider Foo
where "Foo" is the name of a module.
To find detailed information about a particular package you
must specify the version if there is more than one version:
   $ module spider Foo/11.1
===========================
step 47
lua ProjectDIR/src/lmod.in.lua shell --regression_testing keyword foo
===========================
The following modules match your search criteria: "foo"
To learn more about a package execute:
   $ module spider Foo
where "Foo" is the name of a module.
To find detailed information about a particular package you
must specify the version if there is more than one version:
   $ module spider Foo/11.1
===========================
step 48
lua ProjectDIR/src/lmod.in.lua shell --regression_testing spider abcpy
===========================
  abcpy: abcpy/2.1
    This module can be loaded directly: module load abcpy/2.1
    This extension is provided by the following modules. To access the extension you must load one of the following modules. Note that any module names in parentheses show the module location in the software hierarchy.
       python3/3.7
Names marked by a trailing (E) are extensions provided by another module.
===========================
step 49
lua ProjectDIR/src/lmod.in.lua shell --regression_testing spider abcpy/2.1
===========================
  abcpy: abcpy/2.1
    This module can be loaded directly: module load abcpy/2.1
    This extension is provided by the following modules. To access the extension you must load one of the following modules. Note that any module names in parentheses show the module location in the software hierarchy.
       python3/3.7
Names marked by a trailing (E) are extensions provided by another module.
===========================
step 50
runSpiderCmd -o spiderT ProjectDIR/rt/spider/mf/G_Core
===========================
===========================
step 51
runSpiderCmd -o spiderT ProjectDIR/rt/spider/mf/H_Core
===========================
===========================
step 52
lua ProjectDIR/src/lmod.in.lua shell --regression_testing spider
===========================
The following is a list of the modules and extensions currently available:
  abcpy: abcpy/2.1
  mypy: mypy/3.14
  numpy: numpy/1.16.55 (E)
  tornado: tornado/5.0.1 (E), tornado/6.1 (E), tornado/7.1 (E)
Names marked by a trailing (E) are extensions provided by another module.
To learn more about a package execute:
   $ module spider Foo
where "Foo" is the name of a module.
To find detailed information about a particular package you
must specify the version if there is more than one version:
   $ module spider Foo/11.1
===========================
step 53
lua ProjectDIR/src/lmod.in.lua shell --regression_testing --show_hidden spider
===========================
The following is a list of the modules and extensions currently available:
  abcpy: abcpy/2.1
  mypy: mypy/3.14
  numpy: numpy/1.16.4 (E), numpy/1.16.55 (E)
  py: py/.2.7
  scipy: scipy/1.2.2 (E)
  tornado: tornado/3.1.4 (E), tornado/5.0.1 (E), tornado/6.1 (E), tornado/7.1 (E)
Names marked by a trailing (E) are extensions provided by another module.
To learn more about a package execute:
   $ module spider Foo
where "Foo" is the name of a module.
To find detailed information about a particular package you
must specify the version if there is more than one version:
   $ module spider Foo/11.1
===========================
step 54
lua ProjectDIR/src/lmod.in.lua shell --regression_testing spider tornado
===========================
  tornado:
     Versions:
        tornado/5.0.1 (E)
        tornado/6.1 (E)
        tornado/7.1 (E)
Names marked by a trailing (E) are extensions provided by another module.
  For detailed information about a specific "tornado" package (including how to load the modules) use the module's full name.
  Note that names that have a trailing (E) are extensions provided by other modules.
  For example:
     $ module spider tornado/7.1
===========================
step 55
lua ProjectDIR/src/lmod.in.lua shell --regression_testing --show_hidden spider tornado
===========================
  tornado:
     Versions:
        tornado/3.1.4 (E)
        tornado/5.0.1 (E)
        tornado/6.1 (E)
        tornado/7.1 (E)
Names marked by a trailing (E) are extensions provided by another module.
  For detailed information about a specific "tornado" package (including how to load the modules) use the module's full name.
  Note that names that have a trailing (E) are extensions provided by other modules.
  For example:
     $ module spider tornado/7.1
===========================
step 56
lua ProjectDIR/src/lmod.in.lua shell --regression_testing --show_hidden spider
===========================
The following is a list of the modules and extensions currently available:
  abcpy: abcpy/2.1
  mypy: mypy/3.14
  numpy: numpy/1.16.4 (E), numpy/1.16.55 (E)
  py: py/.2.7
  scipy: scipy/1.2.2 (E)
  tornado: tornado/3.1.4 (E), tornado/5.0.1 (E), tornado/6.1 (E), tornado/7.1 (E)
Names marked by a trailing (E) are extensions provided by another module.
To learn more about a package execute:
   $ module spider Foo
where "Foo" is the name of a module.
To find detailed information about a particular package you
must specify the version if there is more than one version:
   $ module spider Foo/11.1
===========================
step 57
lua ProjectDIR/src/lmod.in.lua shell --regression_testing spider numpy
===========================
  numpy: numpy/1.16.55 (E)
    This extension is provided by the following modules. To access the extension you must load one of the following modules. Note that any module names in parentheses show the module location in the software hierarchy.
       mypy/3.14
       abcpy/2.1
Names marked by a trailing (E) are extensions provided by another module.
===========================
step 58
lua ProjectDIR/src/lmod.in.lua shell --regression_testing --show_hidden spider numpy
===========================
  numpy:
     Versions:
        numpy/1.16.4 (E)
        numpy/1.16.55 (E)
Names marked by a trailing (E) are extensions provided by another module.
  For detailed information about a specific "numpy" package (including how to load the modules) use the module's full name.
  Note that names that have a trailing (E) are extensions provided by other modules.
  For example:
     $ module spider numpy/1.16.55
===========================
step 59
runSpiderCmd -o spiderT ProjectDIR/rt/spider/mf/I_Core
===========================
===========================
step 60
lua ProjectDIR/src/lmod.in.lua shell --regression_testing -t --ignore_cache --show_hidden spider GROMACS
===========================
GROMACS/.2016.x-drude-20180214-g3f7439a
GROMACS/5.1.4
GROMACS/2016.2
===========================
step 61
lua ProjectDIR/src/lmod.in.lua shell --regression_testing --ignore_cache --show_hidden spider GROMACS
===========================
  GROMACS:
     Versions:
        GROMACS/.2016.x-drude-20180214-g3f7439a
        GROMACS/5.1.4
        GROMACS/2016.2
  For detailed information about a specific "GROMACS" package (including how to load the modules) use the module's full name.
  Note that names that have a trailing (E) are extensions provided by other modules.
  For example:
     $ module spider GROMACS/2016.2
===========================
step 62
lua ProjectDIR/src/lmod.in.lua shell --regression_testing -t --show_hidden spider GROMACS
===========================
GROMACS/.2016.x-drude-20180214-g3f7439a
GROMACS/5.1.4
GROMACS/2016.2
===========================
step 63
lua ProjectDIR/src/lmod.in.lua shell --regression_testing --show_hidden spider GROMACS
===========================
  GROMACS:
     Versions:
        GROMACS/.2016.x-drude-20180214-g3f7439a
        GROMACS/5.1.4
        GROMACS/2016.2
  For detailed information about a specific "GROMACS" package (including how to load the modules) use the module's full name.
  Note that names that have a trailing (E) are extensions provided by other modules.
  For example:
     $ module spider GROMACS/2016.2
===========================
step 64
lua ProjectDIR/src/lmod.in.lua shell --regression_testing load GROMACS/.2016.x-drude-20180214-g3f7439a
===========================
===========================
step 65
lua ProjectDIR/src/lmod.in.lua shell --regression_testing list
===========================
Currently Loaded Modules:
  1) GROMACS/.2016.x-drude-20180214-g3f7439a (H)
  Where:
   H:  Hidden Module
===========================
step 66
lua ProjectDIR/src/lmod.in.lua shell --regression_testing spider
===========================
The following is a list of the modules and extensions currently available:
  gcc: gcc/10.1
  GROMACS: GROMACS/2018, GROMACS/2019
    GROMACS(CPU/2018) is a versatile package to perform molecular dynamics, i.e. simulate the Newtonian equations of motion for systems with hundreds to millions of particles. This is a CPU enabled build, containing both MPI and threadMPI binaries for 2018.
  zuda: zuda/10.1
To learn more about a package execute:
   $ module spider Foo
where "Foo" is the name of a module.
To find detailed information about a particular package you
must specify the version if there is more than one version:
   $ module spider Foo/11.1
===========================
step 67
runSpiderCmd -o spiderT ProjectDIR/rt/spider/mf2/Core
===========================
===========================
step 68
runSpiderCmd -o dbT ProjectDIR/rt/spider/mf2/Core
===========================
===========================
step 69
lua ProjectDIR/src/lmod.in.lua shell --regression_testing spider GROMACS/2018
===========================
  GROMACS: GROMACS/2018
    Description:
      GROMACS(CPU/2018) is a versatile package to perform molecular dynamics, i.e. simulate the Newtonian equations of motion for systems with hundreds to millions of particles. This is a CPU enabled build, containing both MPI and threadMPI binaries for 2018.
    You will need to load all module(s) on any one of the lines below before the "GROMACS/2018" module is available to load.
      gcc/10.1
    Help:
      HELP Description
      ================
      GROMACS(CPU/2018) is a versatile package to perform molecular dynamics,
       i.e. simulate the Newtonian equations of motion for systems with hundreds to millions of particles.
      This is a CPU enabled build, containing both MPI and threadMPI binaries for 2018.
      More information
      ================
       - Homepage: http://www.gromacs.org
===========================
step 70
lua ProjectDIR/src/lmod.in.lua shell --regression_testing spider GROMACS/2019
===========================
  GROMACS: GROMACS/2019
    Description:
      GROMACS(CPU/2019) is a versatile package to perform molecular dynamics, i.e. simulate the Newtonian equations of motion for systems with hundreds to millions of particles. This is a CPU enabled build, containing both MPI and threadMPI binaries for 2019.
    You will need to load all module(s) on any one of the lines below before the "GROMACS/2019" module is available to load.
      gcc/10.1
      zuda/10.1
    Help:
      HELP Description
      ================
      GROMACS(CPU/2019) is a versatile package to perform molecular dynamics,
       i.e. simulate the Newtonian equations of motion for systems with hundreds to millions of particles.
      This is a CPU enabled build, containing both MPI and threadMPI binaries for 2019.
      More information
      ================
       - Homepage: http://www.gromacs.org
===========================
step 71
lua ProjectDIR/src/lmod.in.lua shell --regression_testing -t spider GROMACS/2019
===========================
gcc/10.1
zuda/10.1
===========================
step 72
lua ProjectDIR/src/lmod.in.lua shell --regression_testing spider
===========================
The following is a list of the modules and extensions currently available:
  gcc: gcc/10.1
  GROMACS: GROMACS/2018, GROMACS/2019
    GROMACS(CPU/2018) is a versatile package to perform molecular dynamics, i.e. simulate the Newtonian equations of motion for systems with hundreds to millions of particles. This is a CPU enabled build, containing both MPI and threadMPI binaries for 2018.
  zuda: zuda/10.1
To learn more about a package execute:
   $ module spider Foo
where "Foo" is the name of a module.
To find detailed information about a particular package you
must specify the version if there is more than one version:
   $ module spider Foo/11.1
===========================
step 73
lua ProjectDIR/src/lmod.in.lua shell --regression_testing spider
===========================
The following is a list of the modules and extensions currently available:
  visit: visit/3.1.2
To learn more about a package execute:
   $ module spider Foo
where "Foo" is the name of a module.
To find detailed information about a particular package you
must specify the version if there is more than one version:
   $ module spider Foo/11.1
===========================
step 74
lua ProjectDIR/src/lmod.in.lua shell --regression_testing avail
===========================
Global Aliases
   intelcompiler -> (N/A)
ProjectDIR/rt/spider/mf3/system
   Sys1/1
ProjectDIR/rt/spider/mf3/init-modules
   init-cluster/1.0
  Where:
   N/A:  Alias cannot be loaded with current $MODULEPATH
If the avail list is too long consider trying:
"module --default avail" or "ml -d av" to just list the default modules.
"module overview" or "ml ov" to display the number of modules for each name.
Use "module spider" to find all possible modules and extensions.
Use "module keyword key1 key2 ..." to search for all possible modules matching any of the "keys".
===========================
step 75
lua ProjectDIR/src/lmod.in.lua shell --regression_testing spider Appl1
===========================
  Appl1: Appl1/1
    You will need to load all module(s) on any one of the lines below before the "Appl1/1" module is available to load.
      init-cluster/1.0  MyStack/2021
      init-cluster/1.0  MyStack/2022
===========================
step 76
lua ProjectDIR/src/lmod.in.lua shell --regression_testing spider Appl1
===========================
  Appl1: Appl1/1
    You will need to load all module(s) on any one of the lines below before the "Appl1/1" module is available to load.
      init-cluster/1.0  MyStack/2021
      init-cluster/1.0  MyStack/2022
===========================
step 77
lua ProjectDIR/src/lmod.in.lua shell --regression_testing avail
===========================
Global Aliases
   intelcompiler -> (N/A)
ProjectDIR/rt/spider/mf4/Core
   A/1.0    B/2.0    S/1.0
  Where:
   N/A:  Alias cannot be loaded with current $MODULEPATH
If the avail list is too long consider trying:
"module --default avail" or "ml -d av" to just list the default modules.
"module overview" or "ml ov" to display the number of modules for each name.
Use "module spider" to find all possible modules and extensions.
Use "module keyword key1 key2 ..." to search for all possible modules matching any of the "keys".
===========================
step 78
lua ProjectDIR/src/lmod.in.lua shell --regression_testing avail
===========================
Global Aliases
   intelcompiler -> (N/A)
ProjectDIR/rt/spider/mf5/Core
   arch/1.0
  Where:
   N/A:  Alias cannot be loaded with current $MODULEPATH
If the avail list is too long consider trying:
"module --default avail" or "ml -d av" to just list the default modules.
"module overview" or "ml ov" to display the number of modules for each name.
Use "module spider" to find all possible modules and extensions.
Use "module keyword key1 key2 ..." to search for all possible modules matching any of the "keys".
===========================
step 79
lua ProjectDIR/src/lmod.in.lua shell --regression_testing purge
===========================
===========================
step 80
runSpiderCmd -o spiderT ProjectDIR/rt/spider/mf7
===========================
===========================
step 81
lua ProjectDIR/src/lmod.in.lua shell --regression_testing spider
===========================
The following is a list of the modules and extensions currently available:
  bad: bad/1.0
  tst1: tst1/19
  tst2: tst2/19
To learn more about a package execute:
   $ module spider Foo
where "Foo" is the name of a module.
To find detailed information about a particular package you
must specify the version if there is more than one version:
   $ module spider Foo/11.1
===========================
step 82
lua ProjectDIR/src/lmod.in.lua shell --regression_testing load bad
===========================
BAD/1.0 v: nil
Lmod has detected the following error: Unable to load module because of error when evaluating modulefile:
     ProjectDIR/rt/spider/mf7/bad/1.0.lua: [string "local v = nil..."]:6: attempt to compare number with nil
     Please check the modulefile and especially if there is a line number specified in the above message
While processing the following module(s):
    Module fullname  Module Filename
    bad/1.0          ProjectDIR/rt/spider/mf7/bad/1.0.lua
===========================
step 83
lua ProjectDIR/src/lmod.in.lua shell --regression_testing spider
===========================
Lmod Warning: User Spider cache appears broken
The following is a list of the modules and extensions currently available:
  bad: bad/1.0
  tst1: tst1/19
  tst2: tst2/19
To learn more about a package execute:
   $ module spider Foo
where "Foo" is the name of a module.
To find detailed information about a particular package you
must specify the version if there is more than one version:
   $ module spider Foo/11.1
