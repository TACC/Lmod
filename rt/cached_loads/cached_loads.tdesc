-- -*- lua -*-
local testName = "cached_loads"

testdescript = {
   owner   = "rtm",
   product = "modules",
   description = [[
	 Test cached loads
   ]],
   keywords = {testName },

   active = 1,
   testName = testName,
   job_submit_method = "INTERACTIVE",

   runScript = [[

     . $(projectDir)/rt/common_funcs.sh

     unsetMT
     initStdEnvVars
     MODULEPATH_ROOT=$(outputDir)/mf;  export MODULEPATH_ROOT
     MODULEPATH=$MODULEPATH_ROOT/Core; export MODULEPATH

     cacheDir=`userCacheDir`

     remove_generated_lmod_files mf/Core/B $cacheDir/spiderT.lua $cacheDir/spiderBigT.lua
     
     runLmod --version                               # 1

     cp -r $(testDir)/mf .
     export LMOD_CACHED_LOADS=1
     runLmod load  C openfoam                        # 2
     unset LMOD_CACHED_LOADS
     runLmod purge                                   # 3              

     mkdir -p $cacheDir
     buildSpiderT $MODULEPATH > $cacheDir/spiderT.lua

     mkdir mf/Core/B
     cp    mf/Core/A/1.0.lua mf/Core/B

     runLmod load   A                                # 4
     runLmod load   B                                # 5
     runLmod load   authentict                       # 6
     runLmod list                                    # 7
     runLmod unload B                                # 8

     export LMOD_CACHED_LOADS=1
     runLmod load   B                                # 9
     runLmod list                                    #10

     export LMOD_IGNORE_CACHE=1
     runLmod load   B                                #11
     runLmod list                                    #12              
    
     runLmod purge                                   #13
     unset  LMOD_IGNORE_CACHE
     export LMOD_DYNAMIC_SPIDER_CACHE=no
     runBase runSpiderCmd -o spiderBigT  $MODULEPATH #14
     runSpiderCmd -o spiderBigT  $MODULEPATH > $cacheDir/spiderBigT.lua
     runLmod -T load  A B C authentict               #15

 


     HOME=$ORIG_HOME
     cat _stdout.[0-9][0-9][0-9] > _stdout.orig
     joinBase64Results  -bash  _stdout.orig _stdout.new
     cleanUp _stdout.new out.txt

     cat _stderr.[0-9][0-9][0-9] > _stderr.orig
     cleanUp _stderr.orig err.txt

     rm -f results.csv
     wrapperDiff --csv results.csv $(testDir)/out.txt out.txt
     wrapperDiff --csv results.csv $(testDir)/err.txt err.txt
     testFinish -r $(resultFn) -t $(runtimeFn) results.csv
   ]],


   blessScript = [[
         # perform what is needed
   ]],

   tests = {
      { id='t1'},
   },

}
