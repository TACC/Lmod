-- -*- lua -*-
local testName = "symlink"

testdescript = {
   owner   = "rtm",
   product = "modules",
   description = [[
	 Test between
   ]],
   keywords = {testName },

   active = 1,
   testName = testName,
   job_submit_method = "INTERACTIVE",

   runScript = [[

     . $(projectDir)/rt/common_funcs.sh

     unsetMT
     initStdEnvVars
     MODULEPATH_ROOT=$(testDir)/mf;    export MODULEPATH_ROOT
     MODULEPATH=$MODULEPATH_ROOT/Core; export MODULEPATH

     remove_generated_lmod_files mf2 mf2.ltd
     rm -f  good.text bad1.text bad2.text

     runLmod --version                  # 1
     runLmod       avail                # 2
     runLmod -t -d avail                # 3
     runLmod load intel a b boost mv2   # 4
     runLmod list                       # 5
     touch   good.text
     ln -s bad bad1.text
     ln -s bad1.text bad2.text
     runLmod load bad_symlink           # 6
     runLmod purge                      # 7
     unsetMT

     MODULEPATH=$(outputDir)/mf2; export MODULEPATH

     cp -a $(testDir)/mf2 $(testDir)/mf2.ltd $(outputDir)
     runLmod av                         # 8
     runLmod spider                     # 9
     runBase chmod -r mf2/gcc/14.5.lua  #10
     runLmod spider                     #11
     runLmod load gcc/14.5              #12

     runLmod purge                      #13
     unsetMT
     MODULEPATH=$(outputDir)/mf2.ltd; export MODULEPATH
     runLmod av                         #14
     runLmod load gcc/14.5              #15

     HOME=$ORIG_HOME
     cat _stdout.[0-9][0-9][0-9] > _stdout.orig
     joinBase64Results  -bash  _stdout.orig _stdout.new
     cleanUp _stdout.new out.txt

     cat _stderr.[0-9][0-9][0-9] > _stderr.orig
     cleanUp _stderr.orig err.txt

     rm -f results.csv
     wrapperDiff --csv results.csv $(testDir)/out.txt out.txt
     wrapperDiff --csv results.csv $(testDir)/err.txt err.txt
     testFinish -r $(resultFn) -t $(runtimeFn) results.csv
   ]],


   blessScript = [[
         # perform what is needed
   ]],

   tests = {
      { id='t1'},
   },

}
