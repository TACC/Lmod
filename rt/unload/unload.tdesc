-- -*- lua -*-
local testName = "unload"

testdescript = {
   owner   = "rtm",
   product = "modules",
   description = [[
	 Test initial module load
   ]],
   keywords = {testName },

   active = 1,
   testName = testName,
   job_submit_method = "INTERACTIVE",

   runScript = [[

     . $(projectDir)/rt/common_funcs.sh

     unsetMT
     initStdEnvVars
     MODULEPATH_ROOT=$(testDir)/mf;       export MODULEPATH_ROOT
     MODULEPATH=$(testDir)/mf/Core;       export MODULEPATH

     remove_generated_lmod_files

     cp $(projectDir)/init/lmodrc.lua .lmodrc.lua

     mkdir -p $HOME/.cache/lmod
     buildSpiderT $MODULEPATH > $HOME/.cache/lmod/spiderT.lua

     runLmod --version                           # 1
     runBase runSpiderCmd -o spiderT $MODULEPATH # 2
     runLmod spider                              # 3
     runLmod load intel                          # 4
     runLmod load mpich2 petsc                   # 5
     runLmod avail                               # 6
     runLmod list                                # 7
     runLmod unload intel                        # 8
     runLmod load   B                            # 9
     runLmod unload B                            #10
     runLmod load   C                            #11
     runLmod unload C                            #12

     HOME=$ORIG_HOME

     cat _stdout.[0-9][0-9][0-9] > _stdout.orig
     joinBase64Results  -bash  _stdout.orig _stdout.new
     cleanUp _stdout.new out.txt

     cat _stderr.[0-9][0-9][0-9] > _stderr.orig
     cleanUp _stderr.orig err.txt

     rm -f results.csv
     wrapperDiff --csv results.csv $(testDir)/out.txt out.txt
     wrapperDiff --csv results.csv $(testDir)/err.txt err.txt
     testFinish -r $(resultFn) -t $(runtimeFn) results.csv
   ]],


   blessScript = [[
         # perform what is needed
   ]],

   tests = {
      { id='t1'},
   },

}
